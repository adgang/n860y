scalar Point
scalar DateTime
scalar PointInput

type Person {
  name: String
  reviews: [Review]
  books: [Book] @relationship(type: "AUTHORED", direction: OUT)
  reviews: [Review] @relationship(type: "WROTE", direction: OUT)
  meetings: [Meeting] @relationship(type: "ATTENDED", direction: OUT)
}

type Book {
  title: String
  isbn: String
  publisher: String
  year: Int
  written_at: Place @relationship(type: "VENUE_OF", direction: IN)
  written_by: Person @relationship(type: "AUTHORED", direction: IN)
  source: PrimarySource @relationship(type: "SOURCED_FROM", direction: OUT)
  statement: [Statement] @relationship(type: "MADE_AT", direction: IN)
}

type Meeting {
  name: String
  attended_by: [Person] @relationship(type:"ATTENDED", direction: IN)
  statement: [Statement] @relationship(type: "MADE_AT", direction: IN)
  at: Place @relationship(type:"VENUE_OF", direction: IN)
  during: DateTime
}

type Statement {
  content: String
  made_at: Occasion @relationship(type: "MADE_AT", direction: OUT)
  made_by: Person @relationship(type: "MADE_BY", direction: OUT)
}

type ClaimedStatement {
  content: String
  made_at: Occasion @relationship(type: "MADE_AT", direction: OUT)
  made_by: Person @relationship(type: "MADE_BY", direction: OUT)
  claimed_in: Statement @relationship(type: "CLAIMED_IN", direction: OUT) 
}

union Occasion = Meeting | Book

type PrimarySource {
  videoLink: String
  imageLink: String
  libraryLink: String
}

type Place {
  name: String!
  location: Point
  happenings: [Occasion] @relationship(type: "VENUE_OF", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: DateTime
  about: Book @relationship(type: "ABOUT", direction: OUT)
  person: Person @relationship(type: "WROTE", direction: IN)
}

# type Profile {
#   meetings: [Meeting]
#   books: [Book]
#   statements: [Statement]
# }

# type Query {
#   getProfile(name: String!) {
#     people(name: $name) {
#       name
#     }
#   }
# }

# type Query {
  # getBooksByPerson(name: String!): Book[]
  #   @cypher(
  #     statement: """
  #       MATCH (b: book)
  #       MATCH (p:Person {name: $name})
  #       MATCH (p)-[:AUTHORED]->(b)
  #       RETURN b
  #     """
  #   )
# }

type Mutation {

  addMeeting(name: String, place: String, when: DateTime): Meeting 
    @cypher(
      statement: """
        MERGE (m:Meeting {name:$name})
        MERGE (p:Place {name:$place})
        MERGE (p)-[:VENUE_OF]->(m)
        ON CREATE SET m.during = DateTime($when)
        RETURN m
      """
    )

  addQuoteFromMeeting(personality: String, quote: String, meeting: String): Statement
    @cypher(
      statement: """
      MERGE (p:Person {name: $personality})
      MERGE (s:Statement {content: $quote})
      MERGE (m:Meeting {name: $meeting})
      MERGE (s)-[:MADE_AT]->(m)
      MERGE (s)-[:MADE_BY]->(p)
      MERGE (p)-[:ATTENDED]->(m)
      RETURN s
      """
    )

  addQuoteFromBook(personality: String, quote: String, book: BookCreateInput, source: String): Statement
    @cypher(
      statement: """
      MERGE (p:Person {name: $personality})
      MERGE (s:Statement {content: $quote})
      MERGE (ps:PrimarySource {libraryLink: $source})
      MERGE (b:Book {title: $book.title})
      MERGE (s)-[:MADE_AT]->(b)
      MERGE (s)-[:MADE_BY]->(p)
      MERGE (b)-[:SOURCED_FROM]->(ps)
      MERGE (p)-[:AUTHORED]->(b)
      SET b.isbn = $book.isbn
      SET b.publisher = $book.publisher
      SET b.year = $book.year
      RETURN s
      """
    )

}
